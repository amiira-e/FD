# from flask import Flask, render_template, request

# import sqlite3

# app = Flask(__name__)

# # Configure the database connection
# db_path = 'C:/Users/23059/OneDrive/Desktop/Amiira/DB_test/demo.db'

# @app.route('/')
# def show_data():
#     # Get the customer name from the request parameters
#     customer_name = request.args.get('nameOrig')

#     # Connect to the SQLite database
#     connection = sqlite3.connect(db_path)
#     cursor = connection.cursor()

#     # Execute a query to retrieve data for the given customer name
#     query = "SELECT * FROM fraud_data WHERE nameOrig = ?"
#     cursor.execute(query, (customer_name,))

#     # Fetch the data from the query result
#     data = cursor.fetchall()

#     # Close the database connection
#     cursor.close()
#     connection.close()

#     # Pass the data to the template and render the page
#     return render_template('result.html', data=data)

# if __name__ == '__main__':
#     app.run(debug=True)

##### GOOD: Both above and below###
# from flask import Flask, render_template, request

# app = Flask(__name__)

# @app.route('/')
# def home():
#     return render_template('home.html')

# @app.route('/dashboard')
# def dashboard():
#     # Add code to handle the dashboard route
#     return "Dashboard Page"

# @app.route('/prediction')
# def prediction():
#     # Add code to handle the prediction route
#     return "Prediction Page"

# @app.route('/result')
# def show_data():
#     # Get the customer name from the request parameters
#     customer_name = request.args.get('nameOrig')

#     # Add your database connection and data retrieval code here

#     # Pass the data to the template and render the page
#     return render_template('result.html', data=data)

# if __name__ == '__main__':
#     app.run()


# # Specify the path to the model file
# model_path = os.path.join(os.path.dirname(__file__), 'static', 'model.pkl')

# # Load the trained model
# with open(model_path, 'rb') as f:
#     model = pickle.load(f)

# # # # #  # #     was in app.py # # # #  # #  #
# from flask import Flask, render_template, redirect, url_for, request
# import sqlite3
# import pickle
# import numpy as np

# app = Flask(__name__)

# # Specify the path to the model file
# model_path = os.path.join(os.path.dirname(__file__), 'static', 'model.pkl')

# # Load the trained model
# model_path = 'path/to/your/model.pkl'
# with open(model_path, 'rb') as f:
#     model = pickle.load(f)

# # Configure the database connection
# db_path = 'C:/Users/23059/OneDrive/Desktop/Amiira/DB_test/demo.db'

# @app.route('/')
# def home():
#     return render_template('home.html')

# @app.route('/dashboard')
# def dashboard():
#     # Add code to handle the dashboard route
#     return "Dashboard Page"

# @app.route('/prediction')
# def prediction():
#     # Redirect to the result route
#     return redirect(url_for('show_data', nameOrig='customer_name_here'))

# @app.route('/result', methods=['GET', 'POST'])
# def show_data():
#     if request.method == 'POST':
#         # Get the form data
#         step = int(request.form['step'])
#         type = request.form['type']
#         amount = float(request.form['amount'])
#         nameOrig = request.form['nameOrig']
#         oldbalanceOrg = float(request.form['oldbalanceOrg'])
#         newbalanceOrig = float(request.form['newbalanceOrig'])
#         newDest = request.form['newDest']
#         oldbalanceDest = float(request.form['oldbalanceDest'])
#         newbalanceDest = float(request.form['newbalanceDest'])
#         isFlaggedFraud = int(request.form['isFlaggedFraud'])

#         # Prepare the input data for prediction
#         input_data = np.array([[step, type, amount, nameOrig, oldbalanceOrg, newbalanceOrig, newDest,
#                                 oldbalanceDest, newbalanceDest, isFlaggedFraud]])
#         input_data = input_data.astype(np.float32)
#         input_data = np.reshape(input_data, (input_data.shape[0], 1, input_data.shape[1]))

#         # Make predictions using the model
#         prediction = model.predict(input_data)[0]

#         # Connect to the SQLite database
#         connection = sqlite3.connect(db_path)
#         cursor = connection.cursor()

#         # Execute a query to retrieve data for the given customer name
#         query = "SELECT * FROM fraud_data WHERE nameOrig = ?"
#         cursor.execute(query, (nameOrig,))

#         # Fetch the data from the query result
#         data = cursor.fetchall()

#         # Close the database connection
#         cursor.close()
#         connection.close()

#         # Pass the data and prediction to the template and render the page
#         return render_template('result.html', data=data, prediction=prediction)

#     return render_template('result.html')

# if __name__ == '__main__':
#     app.run(debug=True)


#`````````````````````````````````````````````````````````````````````````````````````````````````````````
# # @app.route('/result', methods=['GET', 'POST'])
# def show_data():
#     if request.method == 'POST':
#         # Handle the form submission
#         step = int(request.form['step'])
#         type = request.form['type']
#         amount = float(request.form['amount'])
#         nameOrig = request.form['nameOrig']
#         oldbalanceOrg = float(request.form['oldbalanceOrg'])
#         newbalanceOrig = float(request.form['newbalanceOrig'])
#         newDest = request.form['newDest']
#         oldbalanceDest = float(request.form['oldbalanceDest'])
#         newbalanceDest = float(request.form['newbalanceDest'])
#         isFlaggedFraud = int(request.form['isFlaggedFraud'])

#         # Prepare the input data for prediction
#         input_data = np.array([[step, type, amount, nameOrig, oldbalanceOrg, newbalanceOrig, newDest,
#                                 oldbalanceDest, newbalanceDest, isFlaggedFraud]])
#         input_data = input_data.astype(np.float32)
#         input_data = np.reshape(input_data, (input_data.shape[0], 1, input_data.shape[1]))

#         # Make predictions using the model
#         prediction = model.predict(input_data)[0]

#         # Connect to the SQLite database
#         connection = sqlite3.connect(db_path)
#         cursor = connection.cursor()

#         # Execute a query to retrieve data for the given customer name
#         query = "SELECT * FROM fraud_data WHERE nameOrig = ?"
#         cursor.execute(query, (nameOrig,))

#         # Fetch the data from the query result
#         data = cursor.fetchall()

#         # Close the database connection
#         cursor.close()
#         connection.close()

#         # Pass the data and prediction to the template and render the page
#         return render_template('result.html', data=data, prediction=prediction)
    
#     # Handle the GET request (initial page load and customer search)
#     search_type = request.args.get('searchType')
#     search_value = request.args.get('searchValue')
    
#     if search_type and search_value:
#         # Connect to the SQLite database
#         connection = sqlite3.connect(db_path)
#         cursor = connection.cursor()

#         # Execute a query to retrieve data based on the search type and value
#         if search_type == 'nameOrig':
#             query = "SELECT * FROM fraud_data WHERE nameOrig = ?"
#         elif search_type == 'nameDest':
#             query = "SELECT * FROM fraud_data WHERE nameDest = ?"

#         cursor.execute(query, (search_value,))

#         # Fetch the data from the query result
#         data = cursor.fetchall()

#         # Close the database connection
#         cursor.close()
#         connection.close()

#         # Pass the data to the template and render the page
#         return render_template('result.html', data=data)

#     return render_template('result.html')
# @app.route('/result', methods=['GET', 'POST'])
# def show_data():
#     if request.method == 'POST':
#         # Handle the form submission
#         step = int(request.form['step'])
#         type = request.form['type']
#         amount = float(request.form['amount'])
#         nameOrig = request.form['nameOrig']
#         oldbalanceOrg = float(request.form['oldbalanceOrg'])
#         newbalanceOrig = float(request.form['newbalanceOrig'])
#         newDest = request.form['newDest']
#         oldbalanceDest = float(request.form['oldbalanceDest'])
#         newbalanceDest = float(request.form['newbalanceDest'])
#         isFlaggedFraud = int(request.form['isFlaggedFraud'])

#         # Prepare the input data for prediction
#         input_data = np.array([[step, type, amount, nameOrig, oldbalanceOrg, newbalanceOrig, newDest,
#                                 oldbalanceDest, newbalanceDest, isFlaggedFraud]])
#         input_data = input_data.astype(np.float32)
#         input_data = np.reshape(input_data, (input_data.shape[0], 1, input_data.shape[1]))

#         # Make predictions using the model
#         prediction = model.predict(input_data)[0]

#         # Connect to the SQLite database
#         connection = sqlite3.connect(db_path)
#         cursor = connection.cursor()

#         # Execute a query to retrieve data for the given customer name
#         query = "SELECT * FROM train_data WHERE nameOrig = ?"
#         cursor.execute(query, (nameOrig,))

#         # Fetch the data from the query result
#         data = cursor.fetchall()

#         # Close the database connection
#         cursor.close()
#         connection.close()

#         # Pass the data and prediction to the template and render the page
#         return render_template('result.html', data=data, prediction=prediction)

#     # Handle the GET request (initial page load and customer search)
#     search_type = request.args.get('searchType')
#     search_value = request.args.get('searchValue')
    
#     if search_type and search_value:
#         # Connect to the SQLite database
#         connection = sqlite3.connect(db_path)
#         cursor = connection.cursor()

#         # Execute a query to retrieve data based on the search type and value
#         if search_type == 'nameOrig':
#             query = "SELECT * FROM train_data WHERE nameOrig = ?"
#         elif search_type == 'nameDest':
#             query = "SELECT * FROM train_data WHERE nameDest = ?"

#         cursor.execute(query, (search_value,))

#         # Fetch the data from the query result
#         data = cursor.fetchall()

#         # Close the database connection
#         cursor.close()
#         connection.close()

#         # Pass the data to the template and render the page
#         return render_template('result.html', data=data)

#     return render_template('result.html', data=None, prediction=None)`


######NEW############

# <!-- <!DOCTYPE html>
# <html>
# <head>
#     <link rel="stylesheet" type="text/css" href="../static/result.css">
#     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
#     <script src="../static/result.js"></script>
# </head>
# <body>

# <div class="sidenav">
#     <p class="sidenav-title">Choose a task</p>
#     <a href="#form-section" class="sidenav-button">
#         <i class="fas fa-chart-line"></i>
#         Monitor customers' behaviour
#     </a>
#     <a href="#fraud-section" class="sidenav-button">
#         <i class="fas fa-search"></i>
#         Fraud detection
#     </a>
#     <a href="#anomaly-section" class="sidenav-button">
#         <i class="fas fa-exclamation-triangle"></i>
#         Anomaly detection
#     </a>
# </div>

# <p id="form-section"></p>
# <h2>
#     <i class="fas fa-chart-line"></i>
#     Customer Transaction Monitoring
# </h2>

#     <label for="searchType" class="input-label">Customer type</label><br>
#     <select name="searchType">
#         <option value="nameOrig">Sender</option>
#         <option value="nameDest">Recipient</option>
#     </select><br>
#     <label for="searchValue" class="input-label">Customer ID</label><br>
#     <input type="text" name="searchValue">
#     <input type="submit" value="Submit" class="form1-submit">

# </form>
# <br><br><br>

# <div id="error-message" class="error-message"></div>

# {% if data %}
# <h2>
#     <i class="fas fa-list-alt"></i>
#     Customer Activity Logs
# </h2>

# <table>
#     <thead>
#         <tr>
#             <th>Step</th>
#             <th>Amount</th>
#             <th>Old Balance Orig</th>
#             <th>New Balance Orig</th>
#             <th>Old Balance Dest</th>
#             <th>New Balance Dest</th>
#             <th>Is Flagged Fraud</th>
#             <th>Type</th>
#             <th>Name Dest</th>
#             <th>Name Orig</th>
#             <th>Is Fraud</th>
#         </tr>
#     </thead>
#     <tbody>
#         {% for row in data %}
#         <tr>
#             <td>{{ row[1] }}</td>
#             <td>{{ row[2] }}</td>
#             <td>{{ row[3] }}</td>
#             <td>{{ row[4] }}</td>
#             <td>{{ row[5] }}</td>
#             <td>{{ row[6] }}</td>
#             <td>{{ row[7] }}</td>
#             <td>{{ row[8] }}</td>
#             <td>{{ row[9] }}</td>
#             <td>{{ row[10] }}</td>
#             <td>{{ row[11] }}</td>
#         </tr>
#         {% if row[10] == 1 %}
#         <tr>
#             <td colspan="12">
#                 <script>
#                     window.addEventListener('DOMContentLoaded', (event) => {
#                         var response = confirm("Fraudulent Transaction Detected! Investigate further?");

#                         if (response) {
#                             // User clicked "OK" or "Yes"
#                             // Perform further actions as needed
#                         } else {
#                             // User clicked "Cancel" or "No"
#                             // Handle the cancellation logic here
#                         }
#                     });
#                 </script>
#             </td>
#         </tr>
#         {% endif %}
#         {% endfor %}
#     </tbody>
# </table>
# {% endif %}
# <br><br>

# <p id="fraud-section"></p>
# <h2>
#   <i class="fas fa-search logo"></i>
#   Fraud prediction
# </h2>


# <form class="form2" action="{{ url_for('handle_form2') }}" method="post">

#     <div class="form-row">
#         <div class="form-group">
#             <label for="step" class="input-label">Step</label><br>
#             <input type="number" name="step" required>
#         </div>
#         <div class="form-group">
#             <label for="type" class="input-label">Type</label><br>
#             <input type="text" name="type" required>
#         </div>
#         <div class="form-group">
#             <label for="amount" class="input-label">Amount</label><br>
#             <input type="number" step="0.01" name="amount" required>
#         </div>
#     </div>
#     <div class="form-row">
#         <div class="form-group">
#             <label for="nameOrig" class="input-label">nameOrig</label><br>
#             <input type="text" name="nameOrig" required>
#         </div>
#         <div class="form-group">
#             <label for="oldbalanceOrg" class="input-label">Old Balance Orig</label><br>
#             <input type="number" step="0.01" name="oldbalanceOrg" required>
#         </div>
#         <div class="form-group">
#             <label for="newbalanceOrig" class="input-label">New Balance Orig</label><br>
#             <input type="number" step="0.01" name="newbalanceOrig" required>
#         </div>
#     </div>
#     <div class="form-row">
#         <div class="form-group">
#             <label for="newDest" class="input-label">New Destination</label><br>
#             <input type="text" name="newDest" required>
#         </div>
#         <div class="form-group">
#             <label for="oldbalanceDest" class="input-label">Old Balance Dest</label><br>
#             <input type="number" step="0.01" name="oldbalanceDest" required>
#         </div>
#         <div class="form-group">
#             <label for="newbalanceDest" class="input-label">New Balance Dest</label><br>
#             <input type="number" step="0.01" name="newbalanceDest" required>
#         </div>
#     </div>
#     <div class="form-row">
#         <div class="form-group">
#             <label for="isFlaggedFraud" class="input-label">Is Flagged Fraud</label><br>
#             <input type="number" name="isFlaggedFraud" required>
#         </div>
#     </div>
#     <div class="form-row">
#         <div class="form-group">
#             <input type="submit" value="Detect Fraud" class="form2-submit">

#         </div>
#     </div>
#     <div id="loading-message" class="loading-message"></div>
# </form>

# <h1>Fraud Detection Result</h1>

# <h2>Prediction: {{ prediction }}</h2>
# <h3>Is Fraudulent: {{ is_fraudulent }}</h3>

# <table>
#     <thead>
        
#     </thead>
#     <tbody>
        
#     </tbody>
# </table>

# </body>
# </html> 


###workwith above html##

# # Add the click button task#
# from flask import Flask, render_template, redirect, url_for,request
# import sqlite3
# import pickle
# import numpy as np
# import os

# app = Flask(__name__)

# # Specify the path to the model file
# model_path = os.path.join(os.path.dirname(__file__), 'static', 'model.pkl')

# # Load the trained model
# with open(model_path, 'rb') as f:
#     model = pickle.load(f)

# @app.route('/')
# def home():
#     return render_template('home.html')

# @app.route('/dashboard')
# def dashboard():
#     # Add code to handle the dashboard route
#     return "Dashboard Page"

# @app.route('/prediction')
# def prediction():
#     # Redirect to the result route
#     return redirect(url_for('show_data', nameOrig='customer_name_here'))

# # Configure the database connection
# db_path = 'C:/Users/23059/OneDrive/Desktop/Amiira/DB_test/Pastdata.db'

# @app.route('/result', methods=['GET', 'POST'])
# def show_data():
#     if request.method == 'POST':
#         # Handle the form submission
#         step = int(request.form['step'])
#         type = request.form['type']
#         amount = float(request.form['amount'])
#         nameOrig = request.form['nameOrig']
#         oldbalanceOrg = float(request.form['oldbalanceOrg'])
#         newbalanceOrig = float(request.form['newbalanceOrig'])
#         newDest = request.form['newDest']
#         oldbalanceDest = float(request.form['oldbalanceDest'])
#         newbalanceDest = float(request.form['newbalanceDest'])
#         isFlaggedFraud = int(request.form['isFlaggedFraud'])

#         # Prepare the input data for prediction
#         input_data = np.array([[step, type, amount, nameOrig, oldbalanceOrg, newbalanceOrig, newDest,
#                                 oldbalanceDest, newbalanceDest, isFlaggedFraud]])
#         input_data = input_data.astype(np.float32)
#         input_data = np.reshape(input_data, (input_data.shape[0], 1, input_data.shape[1]))

#         # Make predictions using the model
#         prediction = model.predict(input_data)[0]
#         print(prediction)

#         # Connect to the SQLite database
#         connection = sqlite3.connect(db_path)
#         cursor = connection.cursor()

#         # Execute a query to retrieve data for the given customer name
#         query = "SELECT * FROM train_data WHERE nameOrig = ?"
#         cursor.execute(query, (nameOrig,))

#         # Fetch the data from the query result
#         data = cursor.fetchall()

#         # Close the database connection
#         cursor.close()
#         connection.close()

#         # Check if any row has isFraud = 1
#         is_fraudulent = any(row[10] == 1 for row in data)

#         # Pass the data, prediction, and is_fraudulent flag to the template
#         return render_template('result.html', data=data, prediction=prediction, is_fraudulent=is_fraudulent)

#     # Handle the GET request (initial page load and customer search)
#     search_type = request.args.get('searchType')
#     search_value = request.args.get('searchValue')

#     if search_type and search_value:
#         # Connect to the SQLite database
#         connection = sqlite3.connect(db_path)
#         cursor = connection.cursor()

#         # Execute a query to retrieve data based on the search type and value
#         if search_type == 'nameOrig':
#             query = "SELECT * FROM train_data WHERE nameOrig = ?"
#         elif search_type == 'nameDest':
#             query = "SELECT * FROM train_data WHERE nameDest = ?"

#         cursor.execute(query, (search_value,))

#         # Fetch the data from the query result
#         data = cursor.fetchall()

#         # Close the database connection
#         cursor.close()
#         connection.close()
        
#         # Check if any row has isFraud = 1
#         is_fraudulent = any(row[10] == 1 for row in data)

#         # Pass the data, is_fraudulent flag, and search_type/search_value to the template
#         return render_template('result.html', data=data, is_fraudulent=is_fraudulent,
#                                searchType=search_type, searchValue=search_value)

#     return render_template('result.html')

# from flask import redirect, url_for, request

# @app.route('/handle_form1', methods=['POST'])
# def handle_form1():
#     # Get the form data from the request
#     search_value = request.form.get('searchValue')

#     # Process the form data as needed
#     # ...

#     # Redirect to the 'show_data' endpoint with the processed form data
#     return redirect(url_for('show_data', searchValue=search_value))

#     # Connect to the SQLite database
#     connection = sqlite3.connect(db_path)
#     cursor = connection.cursor()

#     # Execute a query to retrieve data for the given customer name
#     query = "SELECT * FROM train_data WHERE nameOrig = ?"
#     cursor.execute(query, (nameOrig,))

#     # Fetch the data from the query result
#     data = cursor.fetchall()

#     # Close the database connection
#     cursor.close()
#     connection.close()

#     # Check if any row has isFraud = 1
#     is_fraudulent = any(row[10] == 1 for row in data)

#     # Redirect to the 'show_data' endpoint with the processed form data and prediction
#     return redirect(url_for('show_data', data=data, prediction=prediction, is_fraudulent=is_fraudulent,
#                             searchType=search_type, searchValue=search_value))

# @app.route('/handle_form2', methods=['POST'])
# def handle_form2():
#     # Get the form data from the request
#     step = int(request.form['step'])
#     form_type = request.form['type']
#     amount = float(request.form['amount'])
#     nameOrig = request.form['nameOrig']
#     oldbalanceOrg = float(request.form['oldbalanceOrg'])
#     newbalanceOrig = float(request.form['newbalanceOrig'])
#     newDest = request.form['newDest']
#     oldbalanceDest = float(request.form['oldbalanceDest'])
#     newbalanceDest = float(request.form['newbalanceDest'])
#     isFlaggedFraud = int(request.form['isFlaggedFraud'])

#     # Prepare the input data for prediction
#     input_data = np.array([[step, form_type, amount, nameOrig, oldbalanceOrg, newbalanceOrig, newDest,
#                             oldbalanceDest, newbalanceDest, isFlaggedFraud]])
#     input_data = input_data.astype(np.float32)
#     input_data = np.reshape(input_data, (input_data.shape[0], 1, input_data.shape[1]))

#     # Make predictions using the model
#     prediction = model.predict(input_data)[0]
#     print(prediction)

#     # Redirect to the 'show_data' endpoint with the processed form data and prediction
#     return redirect(url_for('show_data', prediction=prediction, searchType='nameOrig', searchValue=nameOrig))

# if __name__ == '__main__':
#     app.run(debug=True)